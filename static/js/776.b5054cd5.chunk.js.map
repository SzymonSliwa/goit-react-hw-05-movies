{"version":3,"file":"static/js/776.b5054cd5.chunk.js","mappings":"oKAgCA,IA5BmB,SAAC,GAAgB,IAAdA,EAAa,EAAbA,OACdC,GAAWC,EAAAA,EAAAA,MAEjB,OACE,0BACE,wBACGF,GACCA,EAAOG,KAAI,SAAAC,GAAK,OACd,yBACE,SAAC,KAAD,CAAMC,GAAE,kBAAaD,EAAME,IAAMC,MAAO,CAAEC,KAAMP,GAAhD,SACGG,EAAMK,SAFFL,EAAME,GADD,OAUzB,C,4HCFUI,EAAS,eAACC,EAAD,uDAAQ,GAAR,OAClBC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAACT,EAAIU,GAWvD,OAREV,IAFFU,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAGT,GAAE,GAbe,E,2BCoEpB,EAhFkB,SAAC,GAAsB,IAApBG,EAAmB,EAAnBA,aACnB,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAA4BC,EAAAA,EAAAA,UAAS,IAArC,eAAOvB,EAAP,KAAewB,EAAf,KACA,GAA4BD,EAAAA,EAAAA,UAAS,IAArC,eAAOE,EAAP,KAAeC,EAAf,KACMC,EAAoBN,EAAaO,IAAI,UAE3CC,EAAAA,EAAAA,YAAU,WACR,GAAIJ,EAAQ,CACV,IAAMK,EAAa,mCAAG,8GAEQC,EAAAA,EAAAA,IAAkBN,GAF1B,OAEZO,EAFY,OAGlBR,EAAUQ,GAHQ,gDAKlBC,QAAQC,IAAR,MALkB,yDAAH,qDAQnBJ,GACD,CACF,GAAE,CAACL,KAEJI,EAAAA,EAAAA,YAAU,WAER,GAAIF,EAAmB,CACrB,IAAMG,EAAa,mCAAG,8GAEQC,EAAAA,EAAAA,IAAkBJ,GAF1B,OAEZK,EAFY,OAGlBR,EAAUQ,GAHQ,gDAKlBC,QAAQC,IAAR,MALkB,yDAAH,qDAQnBJ,GACD,CACF,GAAE,CAACH,IAEJ,IAaMQ,EAAY,WAChBT,EAAU,GACX,EAED,OACE,oBAAQU,UAAU,YAAlB,WACE,kBAAMA,UAAU,OAAOC,SAnBN,SAAAC,GACnBA,EAAGC,iBACHpB,EAAa,CAAEM,OAAAA,IACf,IACMe,EADOF,EAAGG,OACYC,SAASjB,OAAOkB,MAAMC,cAClDtB,EAAmC,KAAnBkB,EAAwB,CAAEK,MAAOL,GAAmB,CAAC,GACrEL,GACD,EAYG,WACE,mBAAQW,KAAK,SAASV,UAAU,SAAhC,UACE,iBAAMA,UAAU,eAAhB,uBAGF,kBACEA,UAAU,QACVU,KAAK,OACLC,aAAa,MACbC,WAAS,EACTC,YAAY,gBACZC,KAAK,SAELP,MAAOlB,EACP0B,SAxBmB,SAAAb,GACzBZ,EAAUY,EAAGc,cAAcT,MAC5B,GAoBYjC,MAKRV,IAAU,SAACqD,EAAA,EAAD,CAAYrD,OAAQA,MAGpC,C","sources":["components/MoviesList/MoviesList.jsx","../node_modules/nanoid/index.browser.js","pages/Searchbar/Searchbar.jsx"],"sourcesContent":["import PropTypes from 'prop-types';\n\nimport { Link, useLocation } from 'react-router-dom';\n\nconst MoviesList = ({ movies }) => {\n  const location = useLocation();\n\n  return (\n    <div>\n      <ul>\n        {movies &&\n          movies.map(movie => (\n            <li key={movie.id}>\n              <Link to={`/movies/${movie.id}`} state={{ from: location }}>\n                {movie.title}\n              </Link>\n            </li>\n          ))}\n      </ul>\n    </div>\n  );\n};\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.string.isRequired,\n      id: PropTypes.number.isRequired,\n    }).isRequired\n  ),\n};\n\nexport default MoviesList;\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","import propTypes from 'prop-types';\nimport { useState, useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { nanoid } from 'nanoid';\nimport { getSearchedMovies } from '../../services/API';\nimport MoviesList from '../../components/MoviesList/MoviesList';\n\nconst Searchbar = ({ searchMovies }) => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [movies, setMovies] = useState([]);\n  const [search, setSearch] = useState('');\n  const searchedMovieName = searchParams.get('query');\n\n  useEffect(() => {\n    if (search) {\n      const onMovieSearch = async () => {\n        try {\n          const searchMovie = await getSearchedMovies(search);\n          setMovies(searchMovie);\n        } catch (error) {\n          console.log(error);\n        }\n      };\n      onMovieSearch();\n    }\n  }, [search]);\n\n  useEffect(() => {\n    //   console.log(searchedMovieName);\n    if (searchedMovieName) {\n      const onMovieSearch = async () => {\n        try {\n          const searchMovie = await getSearchedMovies(searchedMovieName);\n          setMovies(searchMovie);\n        } catch (error) {\n          console.log(error);\n        }\n      };\n      onMovieSearch();\n    }\n  }, [searchedMovieName]);\n\n  const handleSubmit = ev => {\n    ev.preventDefault();\n    searchMovies({ search });\n    const form = ev.target;\n    const formInputValue = form.elements.search.value.toLowerCase();\n    setSearchParams(formInputValue !== '' ? { query: formInputValue } : {});\n    resetForm();\n  };\n\n  const handleSearchChange = ev => {\n    setSearch(ev.currentTarget.value);\n  };\n\n  const resetForm = () => {\n    setSearch('');\n  };\n\n  return (\n    <header className=\"Searchbar\">\n      <form className=\"Form\" onSubmit={handleSubmit}>\n        <button type=\"submit\" className=\"Button\">\n          <span className=\"Button-label\">Search</span>\n        </button>\n\n        <input\n          className=\"Input\"\n          type=\"text\"\n          autoComplete=\"off\"\n          autoFocus\n          placeholder=\"Search movies\"\n          name=\"search\"\n          key={nanoid}\n          value={search}\n          onChange={handleSearchChange}\n        />\n      </form>\n      {movies && <MoviesList movies={movies} />}\n    </header>\n  );\n};\n\nSearchbar.propTypes = {\n  searchMovies: propTypes.func.isRequired,\n};\n\nexport default Searchbar;\n"],"names":["movies","location","useLocation","map","movie","to","id","state","from","title","nanoid","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase","searchMovies","useSearchParams","searchParams","setSearchParams","useState","setMovies","search","setSearch","searchedMovieName","get","useEffect","onMovieSearch","getSearchedMovies","searchMovie","console","log","resetForm","className","onSubmit","ev","preventDefault","formInputValue","target","elements","value","toLowerCase","query","type","autoComplete","autoFocus","placeholder","name","onChange","currentTarget","MoviesList"],"sourceRoot":""}